generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id             String        @id @default(uuid())
  name           String
  email          String        @unique
  avatarUrl String?
  googleId  String?  @unique
  acceptTerms    Boolean  @default(false)
  isVerified       Boolean  @default(false)
  authProvider      String @default("credentials")
  verificationCode String?
  hasPassword     Boolean  @default(false)
  passwordHash     String?
  twoFactorEnabled  Boolean  @default(false)
  codeExpiresAt    DateTime?
  createdAt      DateTime      @default(now())

  tasks          Task[]    
  goals          Goal[]   
  finances       Finance[]
  habits         Habit[]  
  notes          Note[]   
  aiInteractions AiLog[]  
  notifications  Notification[]   
  tags           Tag[]  
  events         Event[]  
}

model Task {
  id          String   @id @default(uuid())
  title       String
  description String?
  state       TaskState
  priority    TaskPriority @default(MEDIUM)
  dueDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String

  user        User     @relation(fields: [userId], references: [id])
  tags        Tag[]    @relation("TaskTags")
  feedback    String?
}

enum TaskState {
  TODO
  IN_PROGRESS
  DONE
  EXPIRED
  CANCELED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Goal {
  id          String     @id @default(uuid())
  title       String
  description String?
  status      GoalStatus @default(NOT_STARTED)
  progress    Float      @default(0)
  completed   Boolean    @default(false)
  completionDate DateTime?
  deadline    DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userId      String

tags        Tag[]    @relation("GoalTags")
  user        User       @relation(fields: [userId], references: [id])
  feedback    String?   
}

enum GoalStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  EXPIRED
  CANCELED
}

model Finance {
  id        String      @id @default(uuid())
  type      FinanceType
  amount    Float
  category  String
  note      String?
  date      DateTime    @default(now())
  userId    String

  user      User        @relation(fields: [userId], references: [id])
}

enum FinanceType {
  INCOME
  EXPENSE
}

model Habit {
  id          String   @id @default(uuid())
  name        String
  streak      Int      @default(0)
  lastDone    DateTime?
  frequency   HabitFrequency @default(DAILY)
  goalPerDay  Int      @default(1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String

  user        User     @relation(fields: [userId], references: [id])
}

enum HabitFrequency {
  DAILY
  WEEKLY
  CUSTOM
}

model Note {
  id        String   @id @default(uuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  userId    String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags      Tag[]    @relation("NoteTags")
}

model AiLog {
  id        String   @id @default(uuid())
  prompt    String
  response  String
  createdAt DateTime @default(now())
  userId    String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(uuid())
  title     String
  content   String?
  triggerAt DateTime
  read      Boolean  @default(false)
  userId    String
  type      NotificationType @default(REMINDER)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum NotificationType {
  REMINDER
  ALERT
  SYSTEM
  SUGGESTION
}

model Tag {
  id        String   @id @default(uuid())
  name      String
  color     String?
  userId    String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  tasks     Task[]   @relation("TaskTags")
  notes     Note[]   @relation("NoteTags")
  goals     Goal[]   @relation("GoalTags")
  events    Event[]  @relation("EventTags")
}


model Event {
  id          String   @id @default(uuid())
  title       String
  description String?
  startAt     DateTime
  endAt       DateTime
  location    String?
  confirmed   Boolean  @default(false)
  userId      String

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags        Tag[]    @relation("EventTags")
}
